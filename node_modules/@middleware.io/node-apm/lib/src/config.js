"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeOptions = exports.init = exports.configDefault = void 0;
const api_1 = require("@opentelemetry/api");
const process_1 = __importDefault(require("process"));
const tracer_collector_1 = require("./tracer-collector");
const metrics_collector_1 = require("./metrics-collector");
const logger_1 = require("./logger");
const utils_1 = require("./utils");
const WARNINGS = {
    MISSING_ACCESS_TOKEN: "Missing access token. Specify either MW_ACCESS_TOKEN environment variable or accessToken in the options parameter.",
    MISSING_SERVICE_NAME: "Missing service name. Specify either MW_SERVICE_NAME environment variable or serviceName in the options parameter.",
};
let customResourceAttributes = {};
exports.configDefault = {
    DEBUG: false,
    host: "localhost",
    projectName: "Project-" + process_1.default.pid,
    serviceName: "nodejs-" + process_1.default.pid,
    port: {
        grpc: 9319,
        fluent: 8006,
    },
    target: "http://localhost:9319",
    profilingServerUrl: "",
    enableProfiling: true,
    accessToken: "",
    tenantID: "",
    mwAuthURL: "https://app.middleware.io/api/v1/auth",
    consoleLog: false,
    consoleError: true,
    pauseTraces: false,
    pauseMetrics: false,
    meterProvider: false,
    isServerless: false,
    customResourceAttributes: customResourceAttributes,
    disabledInstrumentations: "",
    consoleExporter: false,
    enableSelfInstrumentation: false,
    excludeHttpTraces: {
        incoming: {
            urls: [],
            methods: []
        },
        outgoing: {
            urls: [],
            methods: []
        }
    }
};
const init = (config = {}) => {
    if (config.hasOwnProperty("target")) {
        exports.configDefault["isServerless"] = true;
    }
    Object.keys(exports.configDefault).forEach((key) => {
        var _a;
        // @ts-ignore
        exports.configDefault[key] = (_a = config[key]) !== null && _a !== void 0 ? _a : exports.configDefault[key];
    });
    computeOptions(exports.configDefault);
    // IF USING MW AGENT
    const isHostExist = process_1.default.env.MW_AGENT_SERVICE && process_1.default.env.MW_AGENT_SERVICE !== ""
        ? true
        : false;
    if (isHostExist) {
        // @ts-ignore
        exports.configDefault.host = "http://" + process_1.default.env.MW_AGENT_SERVICE;
        exports.configDefault.target =
            "http://" + process_1.default.env.MW_AGENT_SERVICE + ":" + exports.configDefault.port.grpc;
    }
    api_1.diag.setLogger(new api_1.DiagConsoleLogger(), exports.configDefault.DEBUG ? api_1.DiagLogLevel.DEBUG : api_1.DiagLogLevel.NONE);
    (0, metrics_collector_1.init)(exports.configDefault);
    (0, logger_1.loggerInitializer)(exports.configDefault);
    (0, tracer_collector_1.init)(exports.configDefault);
    return exports.configDefault;
};
exports.init = init;
function computeOptions(config = {}) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    // Merge environment variables (Higher Priority)
    config.target = (_a = process_1.default.env.MW_TARGET) !== null && _a !== void 0 ? _a : config.target;
    config.accessToken = (_b = process_1.default.env.MW_API_KEY) !== null && _b !== void 0 ? _b : config.accessToken;
    config.projectName = (_c = process_1.default.env.MW_PROJECT_NAME) !== null && _c !== void 0 ? _c : config.projectName;
    config.serviceName = (_d = process_1.default.env.MW_SERVICE_NAME) !== null && _d !== void 0 ? _d : config.serviceName;
    config.pauseTraces =
        (_e = (0, utils_1.parseBoolean)(process_1.default.env.MW_APM_TRACES_ENABLED)) !== null && _e !== void 0 ? _e : config.pauseTraces;
    config.pauseMetrics =
        (_f = (0, utils_1.parseBoolean)(process_1.default.env.MW_APM_METRICS_ENABLED)) !== null && _f !== void 0 ? _f : config.pauseMetrics;
    config.consoleExporter =
        (_g = (0, utils_1.parseBoolean)(process_1.default.env.MW_CONSOLE_EXPORTER)) !== null && _g !== void 0 ? _g : config.consoleExporter;
    config.enableSelfInstrumentation =
        (_h = (0, utils_1.parseBoolean)(process_1.default.env.MW_SELF_INSTRUMENTATION)) !== null && _h !== void 0 ? _h : config.enableSelfInstrumentation;
    // Handle HTTP trace exclusions with environment variable precedence
    const incomingExcludedMethods = process_1.default.env.MW_EXCLUDE_INCOMING_HTTP_METHODS;
    const incomingExcludedUrls = process_1.default.env.MW_EXCLUDE_INCOMING_HTTP_URLS;
    const outgoingExcludedMethods = process_1.default.env.MW_EXCLUDE_OUTGOING_HTTP_METHODS;
    const outgoingExcludedUrls = process_1.default.env.MW_EXCLUDE_OUTGOING_HTTP_URLS;
    // Initialize excludeHttpTraces if not present
    if (!config.excludeHttpTraces) {
        config.excludeHttpTraces = { incoming: {}, outgoing: {} };
    }
    // Ensure incoming and outgoing objects exist
    if (!config.excludeHttpTraces.incoming) {
        config.excludeHttpTraces.incoming = {};
    }
    if (!config.excludeHttpTraces.outgoing) {
        config.excludeHttpTraces.outgoing = {};
    }
    // Apply environment variables with precedence (env overrides programmatic config)
    config.excludeHttpTraces.incoming.methods = incomingExcludedMethods
        ? incomingExcludedMethods.split(",").map(m => m.trim().toUpperCase()).filter(Boolean)
        : (_j = config.excludeHttpTraces.incoming.methods) !== null && _j !== void 0 ? _j : [];
    config.excludeHttpTraces.incoming.urls = incomingExcludedUrls
        ? incomingExcludedUrls.split(",").map(u => u.trim()).filter(Boolean)
        : (_k = config.excludeHttpTraces.incoming.urls) !== null && _k !== void 0 ? _k : [];
    config.excludeHttpTraces.outgoing.methods = outgoingExcludedMethods
        ? outgoingExcludedMethods.split(",").map(m => m.trim().toUpperCase()).filter(Boolean)
        : (_l = config.excludeHttpTraces.outgoing.methods) !== null && _l !== void 0 ? _l : [];
    config.excludeHttpTraces.outgoing.urls = outgoingExcludedUrls
        ? outgoingExcludedUrls.split(",").map(u => u.trim()).filter(Boolean)
        : (_m = config.excludeHttpTraces.outgoing.urls) !== null && _m !== void 0 ? _m : [];
    config.sdkVersion = (0, utils_1.getPackageVersion)();
    // Validate and warn
    if (!config.accessToken) {
        if (config.isServerless || config.enableProfiling) {
            (0, utils_1.structuredLog)("WARN", WARNINGS.MISSING_ACCESS_TOKEN);
        }
    }
    if (!config.serviceName) {
        (0, utils_1.structuredLog)("WARN", WARNINGS.MISSING_SERVICE_NAME);
    }
    return config;
}
exports.computeOptions = computeOptions;
