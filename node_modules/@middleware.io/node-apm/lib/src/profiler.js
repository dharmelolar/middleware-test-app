"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = void 0;
const axios_1 = __importDefault(require("axios"));
// Safely try to require Pyroscope
let Pyroscope = null;
try {
    // Synchronous import
    Pyroscope = require("@pyroscope/nodejs");
}
catch (_a) {
    console.log("Pyroscope profiling is not available");
}
const init = (config) => __awaiter(void 0, void 0, void 0, function* () {
    if (Pyroscope && config.enableProfiling && config.accessToken !== "") {
        try {
            const authUrl = process.env.MW_AUTH_URL || config.mwAuthURL; // Update with the correct auth URL
            const response = yield axios_1.default.post(authUrl, null, {
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded",
                    Authorization: "Bearer " + config.accessToken,
                },
            });
            if (response.status === 200) {
                const data = response.data;
                if (data.success === true) {
                    const account = data.data.project_uid;
                    if (typeof account === "string") {
                        const TenantID = account;
                        config.profilingServerUrl = `https://${account}.middleware.io/profiling`;
                        const profilingServerUrl = process.env.MW_PROFILING_SERVER_URL || config.profilingServerUrl;
                        Pyroscope.init({
                            serverAddress: profilingServerUrl,
                            appName: config.serviceName,
                            tenantID: TenantID,
                        });
                        Pyroscope.start();
                    }
                    else {
                        console.log("Failed to retrieve TenantID from API response");
                    }
                }
                else {
                    console.log("Failed to authenticate with Middleware API, kindly check your access token");
                }
            }
            else {
                console.log("Error making auth request");
            }
        }
        catch (error) {
            console.log("Error:", error.message);
        }
    }
    return config;
});
exports.init = init;
