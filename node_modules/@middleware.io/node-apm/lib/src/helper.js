"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addVCSMetadata = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const git_helper_1 = require("./git.helper");
// Module-level cache for VCS metadata
let cachedVCS = {
    resolved: false,
};
// Helper to find the git root directory
function findGitRoot(startDir) {
    let dir = startDir;
    while (true) {
        try {
            if (fs_1.default.existsSync(path_1.default.join(dir, ".git"))) {
                return dir;
            }
        }
        catch (e) {
            // ignore
        }
        const parentDir = path_1.default.dirname(dir);
        if (parentDir === dir)
            break;
        dir = parentDir;
    }
    return null;
}
function resolveVCSInfo() {
    if (cachedVCS.resolved)
        return { sha: cachedVCS.sha, url: cachedVCS.url };
    let sha = process.env.MW_VCS_COMMIT_SHA;
    let url = process.env.MW_VCS_REPOSITORY_URL;
    const repoDir = findGitRoot(process.cwd());
    if (!sha && repoDir) {
        try {
            sha = (0, git_helper_1.resolveRef)({ gitdir: repoDir, ref: "HEAD" });
        }
        catch (_a) { }
    }
    if (!url && repoDir) {
        try {
            const remotes = (0, git_helper_1.listRemotes)({ gitdir: repoDir });
            const origin = remotes.find((r) => r.remote === "origin");
            url = origin ? origin.url : undefined;
            if (url)
                url = url.replace(/\.git$/, "");
        }
        catch (_b) { }
    }
    cachedVCS = { sha, url, resolved: true };
    return { sha, url };
}
function addVCSMetadata(resourceAttributes) {
    const { sha, url } = resolveVCSInfo();
    if (sha) {
        resourceAttributes["vcs.commit_sha"] = sha;
    }
    if (url) {
        resourceAttributes["vcs.repository_url"] = url;
    }
}
exports.addVCSMetadata = addVCSMetadata;
