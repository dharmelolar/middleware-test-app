"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resourceDetectors = void 0;
const resources_1 = require("@opentelemetry/resources");
const resource_detector_aws_1 = require("@opentelemetry/resource-detector-aws");
const resource_detector_azure_1 = require("@opentelemetry/resource-detector-azure");
const resource_detector_gcp_1 = require("@opentelemetry/resource-detector-gcp");
const resource_detector_container_1 = require("@opentelemetry/resource-detector-container");
const defaultDetectors = {
    env: resources_1.envDetectorSync,
    process: resources_1.processDetectorSync,
    serviceinstance: resources_1.serviceInstanceIdDetectorSync,
    os: resources_1.osDetectorSync,
    host: resources_1.hostDetectorSync,
    container: resource_detector_container_1.containerDetector,
    aws: [
        resource_detector_aws_1.awsBeanstalkDetectorSync,
        resource_detector_aws_1.awsEc2DetectorSync,
        resource_detector_aws_1.awsEcsDetectorSync,
        resource_detector_aws_1.awsEksDetectorSync,
        resource_detector_aws_1.awsLambdaDetectorSync,
    ],
    azure: [resource_detector_azure_1.azureAppServiceDetector, resource_detector_azure_1.azureFunctionsDetector, resource_detector_azure_1.azureVmDetector],
    gcp: resource_detector_gcp_1.gcpDetector,
};
const resourceDetectors = () => {
    // Get detectors from the environment variable
    const detectorsFromEnv = process.env.OTEL_NODE_RESOURCE_DETECTORS || "default";
    let detectorKeys = detectorsFromEnv
        .split(",")
        .map((s) => s.trim().toLowerCase());
    if (detectorKeys.includes("default")) {
        return [
            resources_1.envDetectorSync,
            resources_1.processDetectorSync,
            resources_1.osDetectorSync,
            resource_detector_container_1.containerDetector,
            resources_1.serviceInstanceIdDetectorSync,
            resources_1.hostDetectorSync
        ];
    }
    // Handle the "all" and "none" cases
    if (detectorKeys.includes("none"))
        return [];
    if (detectorKeys.includes("all")) {
        // Flatten nested arrays for AWS and Azure
        return [...Object.values(defaultDetectors).flat()];
    }
    // Filter detectors based on the provided keys in the environment variable
    const resolvedDetectors = [];
    for (const key of detectorKeys) {
        const detector = defaultDetectors[key];
        if (detector) {
            // Check if the detector is an array
            if (Array.isArray(detector)) {
                // If it's an array, spread its contents into resolvedDetectors
                resolvedDetectors.push(...detector);
            }
            else {
                // If it's not an array, push the single detector
                resolvedDetectors.push(detector);
            }
        }
        else {
            console.warn(`Invalid resource detector "${key}" specified in the environment variable OTEL_NODE_RESOURCE_DETECTORS`);
        }
    }
    return resolvedDetectors.flat();
};
exports.resourceDetectors = resourceDetectors;
